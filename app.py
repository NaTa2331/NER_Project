import streamlit as st
import spacy

# Load spaCy model
spacy_model_path = "IE Model"
nlp_spacy = spacy.load(spacy_model_path)

# Initialize session state for storing user inputs
if "total_inputs" not in st.session_state:
    st.session_state.total_inputs = []

# Dictionary chuy·ªÉn ƒë·ªïi m√£ th·ª±c th·ªÉ sang t√™n ƒë·∫ßy ƒë·ªß v√† m√¥ t·∫£
ENTITY_DESCRIPTIONS = {
    "LOC": "ƒê·ªãa ƒëi·ªÉm",
    "ORG": "T√™n t·ªï ch·ª©c",
    "PER": "T√™n ng∆∞·ªùi",
    "MISC": "Th·ª±c th·ªÉ kh√°c"
}

def extract_information_spacy(sentence):
    doc = nlp_spacy(sentence)
    extracted_info = {"LOC": [], "ORG": [], "PER": [], "MISC": []}
    
    prev_label = None
    entity_text = ""
    
    for ent in doc.ents:
        if ent.label_ in extracted_info:
            if prev_label == ent.label_:  # Ti·∫øp t·ª•c c√πng m·ªôt th·ª±c th·ªÉ
                entity_text += " " + ent.text
            else:  # B·∫Øt ƒë·∫ßu th·ª±c th·ªÉ m·ªõi
                if entity_text:
                    extracted_info[prev_label].append(entity_text.strip())
                entity_text = ent.text
                prev_label = ent.label_
    
    # Th√™m th·ª±c th·ªÉ cu·ªëi c√πng n·∫øu c√≥
    if entity_text and prev_label:
        extracted_info[prev_label].append(entity_text.strip())
    
    # Lo·∫°i b·ªè tr√πng l·∫∑p
    for key in extracted_info:
        extracted_info[key] = list(set(extracted_info[key]))
    
    return extracted_info

def format_output(text, entities):
    output = f"### VƒÉn b·∫£n g·ªëc:\n{text}\n\n"
    output += "### K·∫øt qu·∫£ nh·∫≠n di·ªán th·ª±c th·ªÉ:\n"
    
    if any(entities.values()):
        for entity_type, tokens in entities.items():
            if tokens:
                description = ENTITY_DESCRIPTIONS.get(entity_type, "Th·ª±c th·ªÉ kh√°c")
                output += f"- **{description}**: {', '.join(tokens)}\n"
    else:
        output += "*Kh√¥ng t√¨m th·∫•y th·ª±c th·ªÉ n√†o trong vƒÉn b·∫£n.*"
    
    return output

# Streamlit UI
st.title("üîé ·ª®ng d·ª•ng Nh·∫≠n di·ªán Th·ª±c th·ªÉ (NER)")
st.write("·ª®ng d·ª•ng gi√∫p tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng t·ª´ vƒÉn b·∫£n b·∫±ng m√¥ h√¨nh AI.")

user_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch:", "")

if st.button("Nh·∫≠n di·ªán th·ª±c th·ªÉ"):
    if user_input:
        st.session_state.total_inputs.append(user_input)
        
        # X·ª≠ l√Ω m√¥ h√¨nh spaCy
        extracted_entities_spacy = extract_information_spacy(user_input)
        formatted_text_spacy = format_output(user_input, extracted_entities_spacy)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader("üìå K·∫øt qu·∫£ t·ª´ m√¥ h√¨nh AI:")
        st.markdown(formatted_text_spacy)
        
        # L∆∞u c·∫£ vƒÉn b·∫£n nh·∫≠p v√† k·∫øt qu·∫£ nh·∫≠n d·∫°ng v√†o t·ªáp
        all_inputs_with_entities = []
        for text in st.session_state.total_inputs:
            extracted_entities_spacy = extract_information_spacy(text)
            formatted_text_spacy = format_output(text, extracted_entities_spacy)
            all_inputs_with_entities.append(formatted_text_spacy)
        
        # T·∫°o t·ªáp ƒë·ªÉ t·∫£i xu·ªëng
        all_inputs_with_entities_text = "\n\n".join(all_inputs_with_entities)
        
        st.download_button(
            label="üì• T·∫£i xu·ªëng k·∫øt qu·∫£ nh·∫≠n di·ªán",
            data=all_inputs_with_entities_text,
            file_name="ket_qua_ner.txt",
            mime="text/plain"
        )
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n tr∆∞·ªõc khi ph√¢n t√≠ch.")